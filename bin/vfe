#!/usr/bin/env node
'use strict';

var commander = require('commander')
var path = require('path')
var mkdirp = require('mkdirp')
var request = require('request')
var childProcess = require('child_process')
var unzip = require('unzip')
var ProgressBar = require('progress')
var vfeGulp = require('vfe-gulp-cli')
var sync = require('gulp-sync')
var ncp = require('ncp').ncp
var meta = require('../package.json')
var ENV = process.env
var tmp_dir = require('path').join(ENV.APPDATA || ENV.HOME || __dirname, '.vfe')

mkdirp.sync(tmp_dir)

function print (o) {
	console.log(o)
}
commander
	.version(meta.version)

commander
	.command('init [dir]')
	.option('-p, --proxy <url>', 'enable proxy')
	.description('Init vfe component project with init-template.')
	.action(function (dir, command) {
		var dest = dir || '.'
		mkdirp.sync(dest)
		print('Waiting...')
		var ropts = {
			url: 'https://github.com/switer/vfe-init-template/archive/master.zip'
		}
		if (!command.proxy || command.proxy === 'true') {
			ropts.proxy = 'http://proxy.tencent.com:8080'
		} else if (command.proxy && command.proxy !== 'false') {
			ropts.proxy = command.proxy
		}

		request(ropts)
			.on('response', function (res) {
				var len = parseInt(res.headers['content-length'], 10)
				if (len) {
					var bar = new ProgressBar('  downloading [:bar] :percent :etas', {
						complete: '=',
						incomplete: ' ',
						width: 20,
						total: len
					})
					print('')
					res.on('data', function (chunk) {
				 		bar.tick(chunk.length);
					})
				}
				res.on('end', function () {
					print('')
				})
			})
			.on('error', function (err) {
				console.error(err)
			})
			.pipe(unzip.Extract({ path: tmp_dir }))
			.on('close', function () {
				ncp.limit = 16
				ncp(path.join(tmp_dir, 'vfe-init-template-master'), dest, function (err) {
					if (err) {
					   return console.error(err)
					 }
				})
		  	})
	})

commander
	.command('start')
	.description('Start develop server(>: gulp & gulp watch).')
	.action(function () {
		var gulp = vfeGulp()
		gulp.task('vfe-start', sync(gulp).sync(['default', 'watch']))
		gulp.start('vfe-start')
	})

commander
	.command('release')
	.description('Releasing for production(>: gulp release).')
	.action(function () {
		var gulp = vfeGulp()
		gulp.start('release')
	})


commander.parse(process.argv)

/**
 * vfe
 */
if (!commander.args.length) {
	var gulp = vfeGulp()
	gulp.start('default')
}
